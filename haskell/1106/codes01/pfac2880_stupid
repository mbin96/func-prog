module Main (
    main, primes, factorize, fancyString
) where

main = do
    putStrLn (fancyString (factorize 2880))

primes :: [Integer]
primes = sieve [2..] where
    sieve (x:xs) = x : sieve [ y | y <- xs, rem y x /= 0 ]

factorize n = factorize' n primes where
    factorize' k (p:ps)
        | k <= 1        = []
        | rem k p == 0  = p : factorize' (quot k p) (p:ps)
        | otherwise     = factorize' k ps

fancyString []      = ""
fancyString (p:[])  = show p
fancyString (p:ps)  = show p ++ " x " ++ fancyString ps
